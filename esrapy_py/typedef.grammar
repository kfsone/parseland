# Definition of the TypeDef grammar for the python-based Esrapy parser.
#
# Esrapy does a nice job, but it uses Python's arch-nemeses: recursion and lots of method calls.
#
# In the SEMC grammar TypeDef is derived from, some of our larger files can spend minutes in garbage
# collection handling a parse.


# Literals
open_group  = '{'
close_group = '}'

open_array  = '['
close_array = ']'

scope_op    = '::'
parent_op   = ':'

equals_op   = '='

opt_comma   = ','?

bool_type   = 'bool'
int_type    = 'int'
float_type  = 'float'
string_type = 'string'


# Terminals
# Identifiers, etc.
word        = <[A-Za-z_][A-Za-z0-9_]*>

bool        = "true" | "false"
string      = <"[^"]*">
float       = <[+-]?([0-9]+\.[0-9]*|\.[0-9]+)>
int         = <[+-]?[0-9]+>
qual_ident  = scope::word scope_op member::word  type:\enum


# Productions
# Note - the start production has to be the last rule defined.

definition = enum_definition | blueprint_definition


enum_definition = 'enum' typename open_group keys:enum_member*opt_comma close_group
				  type:\enum

type_definition = 'type' typename type_parent? open_group members:member_definition*opt_comma close_group
				  type:\struct

typename = word  # simple hoisting for error clarity
fieldname = word
enum_member = word # simple hoisting for error clarity

type_parent = parent_op typename

member_definition = typename fieldname is_array default:default_value?

is_array = open_array close_array _:\true
         | _:\false
         
default_value = equals_op value

value = scalar_value | compound_value

scalar_value = bool | float | int | string | qual_ident

compound_value = object | is_array

object = open_group members:object_member*opt_comma close_group is_compound:\true
object_member = fieldname:word equals_op value:value

array  = open_group elements:array_element+opt_comma close_group is_compound:\true is_array:\true
array_element = word


# The final production defines the grammar.
root = definition*

